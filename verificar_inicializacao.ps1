# Verificador de Inicializa√ß√£o Autom√°tica - Rob√¥ Python
# Verifica se a tarefa est√° configurada e funcionando corretamente

param(
    [switch]$Detalhado,
    [switch]$Testar
)

Write-Host "üîç Verificador de Inicializa√ß√£o Autom√°tica - Rob√¥ Python" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Cyan
Write-Host ""

$NomeTarefa = "RoboPython_InicializacaoAutomatica"

try {
    # Verificar se a tarefa existe
    $tarefa = Get-ScheduledTask -TaskName $NomeTarefa -ErrorAction SilentlyContinue
    
    if (-not $tarefa) {
        Write-Host "‚ùå Tarefa n√£o encontrada!" -ForegroundColor Red
        Write-Host "   Execute 'configurar_inicializacao.ps1' como administrador para criar" -ForegroundColor Yellow
        Read-Host "Pressione Enter para sair"
        exit 1
    }

    Write-Host "‚úÖ Tarefa encontrada: $NomeTarefa" -ForegroundColor Green
    Write-Host ""

    # Informa√ß√µes b√°sicas da tarefa
    Write-Host "üìã Status da Tarefa:" -ForegroundColor Cyan
    Write-Host "   Estado: $($tarefa.State)" -ForegroundColor White
    
    $info = Get-ScheduledTaskInfo -TaskName $NomeTarefa
    Write-Host "   √öltima execu√ß√£o: $($info.LastRunTime)" -ForegroundColor White
    Write-Host "   Pr√≥xima execu√ß√£o: $($info.NextRunTime)" -ForegroundColor White
    Write-Host "   √öltimo resultado: $($info.LastTaskResult) $(if($info.LastTaskResult -eq 0){'(Sucesso)'} else {'(Erro)'})" -ForegroundColor $(if($info.LastTaskResult -eq 0){'Green'} else {'Red'})
    Write-Host ""

    # Verificar configura√ß√µes se solicitado
    if ($Detalhado) {
        Write-Host "üîß Configura√ß√µes Detalhadas:" -ForegroundColor Cyan
        
        # A√ß√µes
        $acoes = $tarefa.Actions
        Write-Host "   A√ß√µes configuradas:" -ForegroundColor White
        foreach ($acao in $acoes) {
            Write-Host "     - Executar: $($acao.Execute)" -ForegroundColor Gray
            if ($acao.Arguments) {
                Write-Host "       Argumentos: $($acao.Arguments)" -ForegroundColor Gray
            }
        }
        
        # Disparadores
        $disparadores = $tarefa.Triggers
        Write-Host "   Disparadores:" -ForegroundColor White
        foreach ($disparador in $disparadores) {
            Write-Host "     - Tipo: $($disparador.CimClass.CimClassName)" -ForegroundColor Gray
            if ($disparador.Delay) {
                Write-Host "       Atraso: $($disparador.Delay)" -ForegroundColor Gray
            }
        }
        
        # Principal
        Write-Host "   Execu√ß√£o:" -ForegroundColor White
        Write-Host "     - Usu√°rio: $($tarefa.Principal.UserId)" -ForegroundColor Gray
        Write-Host "     - Privil√©gios: $(if($tarefa.Principal.RunLevel -eq 'Highest'){'Administrador'} else {'Usu√°rio'})" -ForegroundColor Gray
        Write-Host ""
    }

    # Verificar arquivo de script
    $caminhoScript = $tarefa.Actions[0].Execute
    Write-Host "üìÅ Verifica√ß√£o do Arquivo:" -ForegroundColor Cyan
    
    if (Test-Path $caminhoScript) {
        Write-Host "   ‚úÖ Arquivo encontrado: $caminhoScript" -ForegroundColor Green
        
        $arquivo = Get-Item $caminhoScript
        Write-Host "   üìÖ √öltima modifica√ß√£o: $($arquivo.LastWriteTime)" -ForegroundColor White
        Write-Host "   üìè Tamanho: $([math]::Round($arquivo.Length/1KB, 2)) KB" -ForegroundColor White
    } else {
        Write-Host "   ‚ùå Arquivo n√£o encontrado: $caminhoScript" -ForegroundColor Red
        Write-Host "      A tarefa n√£o funcionar√° at√© o arquivo ser criado!" -ForegroundColor Yellow
    }
    Write-Host ""

    # Verificar logs recentes
    $pastaLogs = Split-Path $caminhoScript -Parent | Join-Path -ChildPath "logs"
    Write-Host "üìÑ Verifica√ß√£o de Logs:" -ForegroundColor Cyan
    
    if (Test-Path $pastaLogs) {
        $logsRecentes = Get-ChildItem $pastaLogs -Filter "inicializacao_*.log" -ErrorAction SilentlyContinue | 
                       Sort-Object LastWriteTime -Descending | 
                       Select-Object -First 3
        
        if ($logsRecentes.Count -gt 0) {
            Write-Host "   ‚úÖ Logs encontrados ($($logsRecentes.Count) arquivos recentes):" -ForegroundColor Green
            foreach ($log in $logsRecentes) {
                Write-Host "     - $($log.Name) ($($log.LastWriteTime))" -ForegroundColor Gray
            }
            
            # Mostrar √∫ltimas linhas do log mais recente
            $ultimoLog = $logsRecentes[0].FullName
            Write-Host "   üìù √öltimas linhas do log mais recente:" -ForegroundColor White
            $ultimasLinhas = Get-Content $ultimoLog -Tail 5 -ErrorAction SilentlyContinue
            if ($ultimasLinhas) {
                foreach ($linha in $ultimasLinhas) {
                    Write-Host "      $linha" -ForegroundColor Gray
                }
            }
        } else {
            Write-Host "   ‚ö†Ô∏è  Nenhum log encontrado na pasta: $pastaLogs" -ForegroundColor Yellow
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  Pasta de logs n√£o encontrada: $pastaLogs" -ForegroundColor Yellow
    }
    Write-Host ""

    # Testar execu√ß√£o se solicitado
    if ($Testar) {
        Write-Host "üß™ Executando Teste da Tarefa:" -ForegroundColor Cyan
        
        # Verificar se est√° executando como admin para o teste
        if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
            Write-Host "   ‚ö†Ô∏è  Para testar, execute este script como Administrador" -ForegroundColor Yellow
        } else {
            Write-Host "   üöÄ Iniciando tarefa..." -ForegroundColor Blue
            Start-ScheduledTask -TaskName $NomeTarefa
            
            Start-Sleep -Seconds 3
            
            $statusAtual = Get-ScheduledTask -TaskName $NomeTarefa | Select-Object -ExpandProperty State
            Write-Host "   üìä Status ap√≥s in√≠cio: $statusAtual" -ForegroundColor White
            
            if ($statusAtual -eq "Running") {
                Write-Host "   ‚úÖ Tarefa executando corretamente!" -ForegroundColor Green
            } elseif ($statusAtual -eq "Ready") {
                Write-Host "   ‚ÑπÔ∏è  Tarefa finalizou rapidamente (normal para scripts)" -ForegroundColor Blue
            } else {
                Write-Host "   ‚ö†Ô∏è  Status inesperado. Verifique os logs." -ForegroundColor Yellow
            }
        }
        Write-Host ""
    }

    # Resumo e recomenda√ß√µes
    Write-Host "üìä Resumo:" -ForegroundColor Cyan
    $status = "‚úÖ Funcionando"
    $cor = "Green"
    
    if ($tarefa.State -ne "Ready") {
        $status = "‚ö†Ô∏è  Verificar configura√ß√£o"
        $cor = "Yellow"
    }
    
    if (-not (Test-Path $caminhoScript)) {
        $status = "‚ùå Arquivo de script ausente"
        $cor = "Red"
    }
    
    if ($info.LastTaskResult -ne 0 -and $info.LastRunTime) {
        $status = "‚ùå √öltima execu√ß√£o falhou"
        $cor = "Red"
    }
    
    Write-Host "   Status geral: $status" -ForegroundColor $cor
    Write-Host ""
    
    Write-Host "üí° Comandos √∫teis:" -ForegroundColor Yellow
    Write-Host "   - Testar agora: .\verificar_inicializacao.ps1 -Testar" -ForegroundColor White
    Write-Host "   - Ver detalhes: .\verificar_inicializacao.ps1 -Detalhado" -ForegroundColor White
    Write-Host "   - Abrir gerenciador: taskschd.msc" -ForegroundColor White
    Write-Host "   - Remover tarefa: .\remover_inicializacao.ps1" -ForegroundColor White

} catch {
    Write-Host "‚ùå ERRO ao verificar a tarefa:" -ForegroundColor Red
    Write-Host "   $($_.Exception.Message)" -ForegroundColor Yellow
}

Write-Host ""
Read-Host "Pressione Enter para finalizar"